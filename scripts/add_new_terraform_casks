#!/usr/bin/env ruby
# frozen_string_literal: true

require 'erb'
require 'json'
require 'net/http'
require 'uri'

UPDATE_ALL = (ENV['UPDATE_ALL'] == 'yes')

CASK_DIR = ENV['CASK_DIR'] || 'Casks'
CASK_TEMPLATE = ENV['CASK_TEMPLATE'] || '_cask_template.erb'

CASK_OS = 'darwin'
CASK_ARCHS = {
  'amd64' => 'intel',
  'arm64' => 'arm'
}.freeze

RELEASES_BASE_URL = 'https://releases.hashicorp.com/terraform'

# Fetch all Terraform releases, and for each missing version add a Cask and
# print out the version number.
def add_new_terraform_casks
  releases.sorted.each do |version|
    next if !update_all? && casks.include?(version)

    begin
      path = casks.add(releases[version])
      puts "#{version}\t#{path}"
    rescue TerraformReleases::VersionInfoError => e
      warn e.message
    end
  end
end

def casks
  @casks ||= Casks.new
end

def releases
  @releases ||= TerraformReleases.new
end

def update_all?
  UPDATE_ALL
end

# All existing Terraform releases
class TerraformReleases
  class ReleasesError < StandardError; end

  class VersionInfoError < StandardError; end

  # One release version
  class Release
    attr_reader :version, :builds

    def initialize(release_data)
      @version = release_data.fetch('version')

      shasums_file = release_data.fetch('shasums')
      shasums = ShaSums.new("#{RELEASES_BASE_URL}/#{version}/#{shasums_file}")

      @builds ||= release_data.fetch('builds').map { |build| Build.new(build, shasums) }
    end

    # Make public for ERB
    def binding
      super
    end

    def cask_version
      Casks.cask_version(version)
    end

    # Builds suitable for Casks
    def cask_builds
      @cask_builds ||= builds.select(&:cask_arch?).tap do |builds|
        raise VersionInfoError, "No builds found for v#{version}" if builds.empty?
      end
    end

    def cask_archs
      cask_builds.map(&:cask_arch)
    end
  end

  # One arch specific build
  class Build
    attr_reader :version, :os, :arch, :url, :shasums

    def initialize(build_data, shasums)
      @version = build_data.fetch('version')
      @os      = build_data.fetch('os')
      @arch    = build_data.fetch('arch')
      @url     = build_data.fetch('url')
      @shasums = shasums
    end

    def cask_arch?
      os == CASK_OS && CASK_ARCHS.keys.include?(arch)
    end

    def cask_arch
      CASK_ARCHS[arch]
    end

    def sha256
      shasums[self]
    end
  end

  # Sha256sums for a Release
  class ShaSums
    attr_reader :url

    def initialize(url)
      @url = url
    end

    def [](build)
      shasums.each_line do |line|
        fields = line.split
        return fields[0] if fields[1].include? "_#{build.os}_#{build.arch}."
      end

      raise VersionInfoError,
            "Failed to find sha256 sum for #{build.os}/#{build.arch} v#{build.version}"
    end

    def shasums
      @shasums ||= fetch_shasums
    end

    def fetch_shasums
      res = Net::HTTP.get_response(URI(url))
      return res.body if res.is_a?(Net::HTTPSuccess)

      raise VersionInfoError,
            "Failed to fetch sha256 sums from #{url}\n-> #{res.code} #{res.message}"
    end
  end

  attr_reader :releases_url

  def initialize
    @releases_url = "#{RELEASES_BASE_URL}/index.json"
  end

  def versions
    @versions ||= fetch_releases
  end

  def sorted
    versions.keys.sort_by { |v| Gem::Version.new(v) }
  end

  # Returns the specified release
  def [](version)
    Release.new(versions.fetch(version))
  end

  def fetch_releases
    res = Net::HTTP.get_response(URI(releases_url))
    return JSON.parse(res.body).fetch('versions') if res.is_a?(Net::HTTPSuccess)

    raise ReleasesError,
          "Failed to fetch Terraform releases from #{releases_url}\n" \
          "-> #{res.code} #{res.message}"
  end
end

# Terraform Casks in this repository
class Casks
  def self.cask_version(version)
      version.downcase.gsub(/[^@a-z0-9]+/, '-')
  end

  def include?(version)
    versions.include?(Casks.cask_version(version))
  end

  def add(release)
    File.join(CASK_DIR, "terraform-#{release.cask_version}.rb").tap do |cask_file|
      IO.write(cask_file, template.result(release.binding))
    end
  end

  def versions
    @versions ||= Dir.glob(File.join(CASK_DIR, 'terraform-*.rb')).map do |file|
      v = File.basename(file, '.rb').sub(/^terraform-/, '')
      Casks.cask_version(v)
    end
  end

  def template
    @template ||= ERB.new(IO.read(CASK_TEMPLATE), trim_mode: '-')
  end
end

add_new_terraform_casks if __FILE__ == $PROGRAM_NAME
